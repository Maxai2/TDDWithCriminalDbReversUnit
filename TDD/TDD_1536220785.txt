Imprison
	criminal не должен быть null
		факт: передаем нулл и ждем исключение
		факт: передаем нормальный объекти не ждем исключение
		
	term должен быть больше 0 и меньше или равно 5000
		теория: передаем несколько валидных days и не ждем исключение
		теория: передаем несколько невалидных days и ждем исключение
	
	возраст criminal должен быть больше 8 лет
		теория: передаем несколько criminal с валидной датой рождения и не ждем исключение
		теория: передаем несколько criminal с невалидной датой рождения и ждем исключение
		
	criminal не должен быть Jailed на момент вызова метода
		факт: передаем criminal с Jailed = true и ждем исключение
		факт: передаем criminal с Jailed = false и не ждем исключение
		
	если criminal уже сидел, нужно обновить старую запись, а не добавлять новую
		факт: передаем существующий criminal и проверяем, не увеличилось ли количество в листе
		факт: передаем новый criminal и проверяем, увеличилось ли количество в листе
======================================================================================	
Release
	criminal не должен быть null
		факт: передаем нулл и ждем исключение
		факт: передаем нормальный объекти не ждем исключение
		
	criminal должен быть Jailed
		факт: передаем criminal с Jailed = false и ждем исключение
		факт: передаем criminal с Jailed = true и не ждем исключение
	
	удалять criminal из листа не нужно
		факт: передаем criminal и проверяем, не уменьшилось ли количество в листе
======================================================================================
GetAll
	должен возвращать коллекцию объектов Criminal
	если коллекция пуста - должен возвращать пустую коллекцию
======================================================================================	
Get
	id должен быть больше 0
		теория: передаем несколько невалидных id и ждем исключение
		теория: передаем несколько валидных id и не ждем исключение
		
	если Criminal с таким id не найден - метод должен вернуть null
		теория: передаем несколько невалидных id и ждем null
	
	если Criminal найден - метод должен вернуть ссылку на него
		теория: передаем несколько валидных id и ждем объекты типа Criminal
======================================================================================		
IncreaseTerm
	criminal не должен быть null
		факт: передаем нулл и ждем исключение
		факт: передаем нормальный объекти не ждем исключение
		
	days должен быть положительный и не превышать 5000
		теория: передаем несколько валидных days и не ждем исключение
		теория: передаем несколько невалидных days и ждем исключение
		
	метод должен увеличивать DaysTerm переданного criminal
		теория: передаем несколько валидных days и проверяем увеличение DaysTerm		
	
	суммарный DaysTerm не должен превышать 5000 (округлять до 5000)
		теория: передаем несколько days, в том числе очень больших и проверяем значение DaysTerm
======================================================================================		
DecreaseTerm
	criminal не должен быть null
		факт: передаем нулл и ждем исключение
		факт: передаем нормальный объект и не ждем исключение
		
	days должен быть положительный и не превышать 5000 
		теория: передаем несколько валидных days и не ждем исключение
		теория: передаем несколько невалидных days и ждем исключение
		
	метод должен уменьшать DaysTerm переданного criminal
		теория: передаем несколько валидных days и проверяем уменьшение DaysTerm		
	
	полученный в результате DaysTerm не должен быть меньше 0
		теория: передаем несколько days, в том числе очень больших и проверяем значение DaysTerm
		
	при достижении DaysTerm 0 - нужно выпустить criminal (сделать Jailed = false)
		теория: передаем несколько days, которые точно уменьшат DaysTerm до 0 и проверяем Jailed
======================================================================================	

	public class CriminalDb {
        List<Criminal> criminals = new List<Criminal>();

        public void Imprison(Criminal criminal, int term) {
            if (criminal is null) {
                throw new ArgumentNullException(nameof(criminal));
            }
            if (DateTime.Now.Subtract(criminal.DateOfBirth).TotalDays / 365 <= 8) {
                throw new ArgumentOutOfRangeException($"{nameof(criminal.DateOfBirth)}", 
                                           "criminal should be older than 8 y/o");
            }
            if (term <= 0 || term > 5000) {
                var msg = $"{nameof(term)} should be in [1; 5000]";
                throw new ArgumentOutOfRangeException(nameof(term), msg);
            }

            criminal.DaysTerm = term;
            criminal.Jailed = true;
            criminals.Add(criminal);
        }
        public void Release(Criminal criminal) {
            throw new NotImplementedException();
        }
        public IEnumerable<Criminal> GetAll() {
            throw new NotImplementedException();
        }
        public Criminal Get(int id) {
            throw new NotImplementedException();
        }
        public void IncreaseTerm(Criminal criminal, int days) {
            throw new NotImplementedException();
        }
        public void DecreaseTerm(Criminal criminal, int days) {
            throw new NotImplementedException();
        }
    }
	